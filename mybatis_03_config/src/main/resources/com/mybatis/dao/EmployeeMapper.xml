<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- <mapper namespace="com.mybatis.EmployeeMapper"> -->
<mapper namespace="com.mybatis.dao.EmployeeMapper">
<!-- 
	namespace : 名称空间
	id : 唯一标识
	resultType : 返回值类型
	#{id} : 从传递过来的参数中获取id值
	
	public Employee getById(Integer id);
 -->
	<!-- <select id="selectEmp" resultType="com.mybatis.bean.Employee">
		select id, last_name as lastName, email, gender from tbl_employee where id = #{id}
	</select> -->
	<select id="getById" resultType="emp">
		select * from tbl_employee where id = #{id}
	</select>
	<!-- 在有 databaseId 标记下, 相同id但无databaseId标记的sql会被舍弃 -->
	<select id="getById" resultType="emp"
		databaseId="mysql">
		select * from tbl_employee where id = #{id}
	</select>
	<select id="getById" resultType="emp"
		databaseId="oracle">
		select EMPLOYEE_ID id,LAST_NAME	lastName,EMAIL email 
		from employees where EMPLOYEE_ID=#{id}
	</select>
	
	
	<!-- public void addEmp(Employee employee); -->
	<!-- parameterType：参数类型，可以省略， 
	获取自增主键的值：
		mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；
		useGeneratedKeys="true"；使用自增主键获取主键值策略
		keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性
	-->
	<insert id="addEmp" parameterType="emp">
		insert into tbl_employee (last_name, email, gender) values (#{lastName}, #{email}, #{gender})
	</insert>
	
	<!-- public void updateEmp(Employee employee); -->
	<update id="updateEmp">
		update tbl_employee set last_name = #{lastName}, email = #{email}, gender = #{gender} where id = #{id}
	</update>
	
	<!-- public void deleteEmp(Integer id);  -->
	<delete id="deleteEmp">
		delete from tbl_employee where id = #{id}
	</delete>
</mapper>