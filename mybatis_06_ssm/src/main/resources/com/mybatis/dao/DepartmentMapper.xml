<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.dao.DepartmentMapper">
<!-- 引用缓存：namespace：指定和哪个名称空间下的缓存一样 -->
<cache-ref namespace="com.mybatis.dao.EmployeeMapper"/>

	<!--public Department getDeptById(Integer id);  -->
	<select id="getDeptById" resultType="com.mybatis.bean.Dept">
		select id, dept_name deptName from dept where id=#{id}
	</select>
	
	<!-- 
	private Integer id;
	private String deptName;
	
	private List<Employee> employees;
	 -->
	 
	<!--嵌套结果集的方式，使用collection标签定义关联的集合类型的属性封装规则  -->
	<resultMap type="com.mybatis.bean.Dept" id="MyDept">
		<id property="id" column="did" />
		<result property="deptName" column="dept_name" />
		<!-- 
			collection定义关联集合类型的属性的封装规则 
			ofType:指定集合里面元素的类型
		-->
		<collection property="employees" ofType="com.mybatis.bean.Employee">
			<id property="id" column="eid" />
			<result property="lastName" column="last_name" />
			<result property="email" column="email" />
			<result property="gender" column="gender" />
			<association property="dept" resultMap="MyDept"></association>
		</collection>	
	</resultMap>
	<!-- public Department getDeptByIdPlus(Integer id); -->
	<select id="getDeptByIdPlus" resultMap="MyDept">
		SELECT
			d.id did,
			dept_name,
			e.id eid,
			last_name,
			gender,
			email
		FROM
			dept d
		LEFT JOIN tbl_employee e ON d.id = e.d_id
		WHERE
			d.id = #{id};
	</select>
	
	<!-- collection：分段查询 -->
	<resultMap type="com.mybatis.bean.Dept" id="MyDeptStep">
		<id property="id" column="id" />
		<result property="deptName" column="dept_name" />
		<collection property="employees" 
		select="com.mybatis.dao.EmployeeMapperPlus.getEmpsByDeptId" column="{deptid=id}" fetchType="lazy">

		</collection>	
	</resultMap>
	
	 
	<!-- public List<Employee> getEmpsByDeptId(Integer deptId); -->
	<select id="getDeptByIdStep" resultMap="MyDeptStep">
		SELECT * FROM dept WHERE id = #{id};
	</select>
	
	<!-- 扩展：多列的值传递过去：
			将多列的值封装map传递；
			column="{key1=column1,key2=column2}"
		fetchType="lazy"：表示使用延迟加载；
				- lazy：延迟
				- eager：立即
	 -->
	
</mapper>